
lce_special_char.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f28  08002f28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f30  08002f30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002fa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002fa8  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a43  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001699  00000000  00000000  00028ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020630  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093d1  00000000  00000000  0004b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6223  00000000  00000000  000548e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ab0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f34  00000000  00000000  0011ab5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ea0 	.word	0x08002ea0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002ea0 	.word	0x08002ea0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Lcd_Port>:
#include "lcd.h"

void Lcd_Port(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(lcd->data_ports[0], lcd->data_pins[0], data & 0x01);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	8a19      	ldrh	r1, [r3, #16]
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	f000 ff01 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd->data_ports[1], lcd->data_pins[1], (data >> 1) & 0x01);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6858      	ldr	r0, [r3, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	8a59      	ldrh	r1, [r3, #18]
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	085b      	lsrs	r3, r3, #1
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	f000 fef4 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd->data_ports[2], lcd->data_pins[2], (data >> 2) & 0x01);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6898      	ldr	r0, [r3, #8]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	8a99      	ldrh	r1, [r3, #20]
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	f000 fee7 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd->data_ports[3], lcd->data_pins[3], (data >> 3) & 0x01);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	68d8      	ldr	r0, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8ad9      	ldrh	r1, [r3, #22]
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	f000 feda 	bl	80013d8 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Lcd_EnablePulse>:

void Lcd_EnablePulse(Lcd_HandleTypeDef * lcd)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, GPIO_PIN_SET);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6a18      	ldr	r0, [r3, #32]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	f000 feca 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fc29 	bl	8000e9c <HAL_Delay>
    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, GPIO_PIN_RESET);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a18      	ldr	r0, [r3, #32]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	f000 febf 	bl	80013d8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fc1e 	bl	8000e9c <HAL_Delay>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <Lcd_Cmd>:

void Lcd_Cmd(Lcd_HandleTypeDef * lcd, uint8_t cmd)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, GPIO_PIN_RESET);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6998      	ldr	r0, [r3, #24]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8b9b      	ldrh	r3, [r3, #28]
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	f000 feaa 	bl	80013d8 <HAL_GPIO_WritePin>
    Lcd_Port(lcd, (cmd >> 4));
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	091b      	lsrs	r3, r3, #4
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff91 	bl	80005b4 <Lcd_Port>
    Lcd_EnablePulse(lcd);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffca 	bl	800062c <Lcd_EnablePulse>
    Lcd_Port(lcd, cmd);
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	4619      	mov	r1, r3
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff89 	bl	80005b4 <Lcd_Port>
    Lcd_EnablePulse(lcd);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffc2 	bl	800062c <Lcd_EnablePulse>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Lcd_Data>:

void Lcd_Data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, GPIO_PIN_SET);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6998      	ldr	r0, [r3, #24]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	8b9b      	ldrh	r3, [r3, #28]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	f000 fe86 	bl	80013d8 <HAL_GPIO_WritePin>
    Lcd_Port(lcd, (data >> 4));
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff6d 	bl	80005b4 <Lcd_Port>
    Lcd_EnablePulse(lcd);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ffa6 	bl	800062c <Lcd_EnablePulse>
    Lcd_Port(lcd, data);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff65 	bl	80005b4 <Lcd_Port>
    Lcd_EnablePulse(lcd);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff9e 	bl	800062c <Lcd_EnablePulse>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Lcd_Init>:

void Lcd_Init(Lcd_HandleTypeDef * lcd)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);
 8000700:	2032      	movs	r0, #50	; 0x32
 8000702:	f000 fbcb 	bl	8000e9c <HAL_Delay>
    Lcd_Cmd(lcd, 0x02);
 8000706:	2102      	movs	r1, #2
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ffad 	bl	8000668 <Lcd_Cmd>
    Lcd_Cmd(lcd, 0x28);
 800070e:	2128      	movs	r1, #40	; 0x28
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ffa9 	bl	8000668 <Lcd_Cmd>
    Lcd_Cmd(lcd, 0x0C);
 8000716:	210c      	movs	r1, #12
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffa5 	bl	8000668 <Lcd_Cmd>
    Lcd_Cmd(lcd, 0x06);
 800071e:	2106      	movs	r1, #6
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffa1 	bl	8000668 <Lcd_Cmd>
    Lcd_Cmd(lcd, 0x01);
 8000726:	2101      	movs	r1, #1
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff9d 	bl	8000668 <Lcd_Cmd>
    HAL_Delay(5);
 800072e:	2005      	movs	r0, #5
 8000730:	f000 fbb4 	bl	8000e9c <HAL_Delay>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Lcd_create>:

Lcd_HandleTypeDef Lcd_create(Lcd_PortType port[], Lcd_PinType pin[], Lcd_PortType rs_port, Lcd_PinType rs_pin, Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
    Lcd_HandleTypeDef lcd;

    lcd.data_ports[0] = port[0];
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	613b      	str	r3, [r7, #16]
    lcd.data_ports[1] = port[1];
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	617b      	str	r3, [r7, #20]
    lcd.data_ports[2] = port[2];
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	61bb      	str	r3, [r7, #24]
    lcd.data_ports[3] = port[3];
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	61fb      	str	r3, [r7, #28]

    lcd.data_pins[0] = pin[0];
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	843b      	strh	r3, [r7, #32]
    lcd.data_pins[1] = pin[1];
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	847b      	strh	r3, [r7, #34]	; 0x22
    lcd.data_pins[2] = pin[2];
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	84bb      	strh	r3, [r7, #36]	; 0x24
    lcd.data_pins[3] = pin[3];
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	88db      	ldrh	r3, [r3, #6]
 8000778:	84fb      	strh	r3, [r7, #38]	; 0x26

    lcd.rs_port = rs_port;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
    lcd.rs_pin = rs_pin;
 800077e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000782:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lcd.en_port = en_port;
 8000784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
    lcd.en_pin = en_pin;
 8000788:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800078c:	86bb      	strh	r3, [r7, #52]	; 0x34

    lcd.mode = mode;
 800078e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000792:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    Lcd_Init(&lcd);
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffac 	bl	80006f8 <Lcd_Init>

    return lcd;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	461d      	mov	r5, r3
 80007a4:	f107 0410 	add.w	r4, r7, #16
 80007a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007b4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	3738      	adds	r7, #56	; 0x38
 80007bc:	46bd      	mov	sp, r7
 80007be:	bdb0      	pop	{r4, r5, r7, pc}

080007c0 <Lcd_cursor>:

void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	4613      	mov	r3, r2
 80007ce:	70bb      	strb	r3, [r7, #2]
    uint8_t maskData;

    maskData = (col-1) & 0x0F;
 80007d0:	78bb      	ldrb	r3, [r7, #2]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	73fb      	strb	r3, [r7, #15]
    if(row==0)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d109      	bne.n	80007f6 <Lcd_cursor+0x36>
    {
        maskData |= 0x80;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e8:	73fb      	strb	r3, [r7, #15]
        Lcd_Cmd(lcd, maskData);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff3a 	bl	8000668 <Lcd_Cmd>
    else
    {
        maskData |= 0xC0;
        Lcd_Cmd(lcd, maskData);
    }
}
 80007f4:	e008      	b.n	8000808 <Lcd_cursor+0x48>
        maskData |= 0xC0;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80007fc:	73fb      	strb	r3, [r7, #15]
        Lcd_Cmd(lcd, maskData);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4619      	mov	r1, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff30 	bl	8000668 <Lcd_Cmd>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Lcd_string>:

void Lcd_string(Lcd_HandleTypeDef * lcd, char *str)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
    while (*str) Lcd_Data(lcd, *str++);
 800081a:	e007      	b.n	800082c <Lcd_string+0x1c>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	603a      	str	r2, [r7, #0]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff42 	bl	80006b0 <Lcd_Data>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f3      	bne.n	800081c <Lcd_string+0xc>
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <Lcd_int>:

void Lcd_int(Lcd_HandleTypeDef * lcd, int num)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
    char str[16];
    sprintf(str, "%d", num);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <Lcd_int+0x2c>)
 8000852:	4618      	mov	r0, r3
 8000854:	f001 feb6 	bl	80025c4 <siprintf>
    Lcd_string(lcd, str);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffd6 	bl	8000810 <Lcd_string>
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08002eb8 	.word	0x08002eb8

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b0a0      	sub	sp, #128	; 0x80
 8000874:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fa9f 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f85d 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 f8f3 	bl	8000a68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000882:	f000 f8c7 	bl	8000a14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <main+0xb8>)
 8000888:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800088c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = { GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6 };
 8000892:	4a26      	ldr	r2, [pc, #152]	; (800092c <main+0xbc>)
 8000894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80008a0:	4638      	mov	r0, r7
 80008a2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80008a6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80008aa:	2300      	movs	r3, #0
 80008ac:	9303      	str	r3, [sp, #12]
 80008ae:	2310      	movs	r3, #16
 80008b0:	9302      	str	r3, [sp, #8]
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <main+0xc0>)
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	2320      	movs	r3, #32
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <main+0xc0>)
 80008bc:	f7ff ff3e 	bl	800073c <Lcd_create>
 80008c0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80008c4:	463d      	mov	r5, r7
 80008c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008d2:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0, 1);
 80008d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008da:	2201      	movs	r2, #1
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff6e 	bl	80007c0 <Lcd_cursor>
  Lcd_string(&lcd, " hello");
 80008e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e8:	4912      	ldr	r1, [pc, #72]	; (8000934 <main+0xc4>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff90 	bl	8000810 <Lcd_string>

  for (int x = 1; x <= 200; x++)
 80008f0:	2301      	movs	r3, #1
 80008f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008f4:	e013      	b.n	800091e <main+0xae>
  {
      Lcd_cursor(&lcd, 1, 7);
 80008f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fa:	2207      	movs	r2, #7
 80008fc:	2101      	movs	r1, #1
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff5e 	bl	80007c0 <Lcd_cursor>
      Lcd_int(&lcd, x);
 8000904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000908:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff98 	bl	8000840 <Lcd_int>
      HAL_Delay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f000 fac2 	bl	8000e9c <HAL_Delay>
  for (int x = 1; x <= 200; x++)
 8000918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800091a:	3301      	adds	r3, #1
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800091e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000920:	2bc8      	cmp	r3, #200	; 0xc8
 8000922:	dde8      	ble.n	80008f6 <main+0x86>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000924:	e7fe      	b.n	8000924 <main+0xb4>
 8000926:	bf00      	nop
 8000928:	08002ec4 	.word	0x08002ec4
 800092c:	08002ed4 	.word	0x08002ed4
 8000930:	40020400 	.word	0x40020400
 8000934:	08002ebc 	.word	0x08002ebc

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2234      	movs	r2, #52	; 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fe34 	bl	80025b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <SystemClock_Config+0xd4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <SystemClock_Config+0xd4>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <SystemClock_Config+0xd4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <SystemClock_Config+0xd8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000984:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <SystemClock_Config+0xd8>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a0:	2310      	movs	r3, #16
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009ac:	2310      	movs	r3, #16
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f86a 	bl	8001aa0 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009d2:	f000 f8df 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fd0a 	bl	800140c <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009fe:	f000 f8c9 	bl	8000b94 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	; 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_USART2_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	f001 fac6 	bl	8001fdc <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a56:	f000 f89d 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	40004400 	.word	0x40004400

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	21e0      	movs	r1, #224	; 0xe0
 8000af2:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_GPIO_Init+0x120>)
 8000af4:	f000 fc70 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	4823      	ldr	r0, [pc, #140]	; (8000b8c <MX_GPIO_Init+0x124>)
 8000afe:	f000 fc6b 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2170      	movs	r1, #112	; 0x70
 8000b06:	4822      	ldr	r0, [pc, #136]	; (8000b90 <MX_GPIO_Init+0x128>)
 8000b08:	f000 fc66 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	481a      	ldr	r0, [pc, #104]	; (8000b8c <MX_GPIO_Init+0x124>)
 8000b24:	f000 fac4 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000b28:	23e0      	movs	r3, #224	; 0xe0
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <MX_GPIO_Init+0x120>)
 8000b40:	f000 fab6 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_GPIO_Init+0x124>)
 8000b5c:	f000 faa8 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b60:	2370      	movs	r3, #112	; 0x70
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x128>)
 8000b78:	f000 fa9a 	bl	80010b0 <HAL_GPIO_Init>

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020400 	.word	0x40020400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fa32 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_UART_MspInit+0x8c>)
 8000c66:	f000 fa23 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8c6 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f001 fc2c 	bl	8002560 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	200000d0 	.word	0x200000d0
 8000d3c:	200000e8 	.word	0x200000e8

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffd7 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f001 fbeb 	bl	800256c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fd6b 	bl	8000870 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da8:	08002f38 	.word	0x08002f38
  ldr r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db0:	200000e8 	.word	0x200000e8

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f931 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fed8 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f93b 	bl	8001096 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e38:	f000 f911 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200000d4 	.word	0x200000d4

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200000d4 	.word	0x200000d4

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff47 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff5c 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb0 	bl	8001004 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e165      	b.n	8001398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8154 	bne.w	8001392 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80ae 	beq.w	8001392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_GPIO_Init+0x300>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <HAL_GPIO_Init+0x300>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <HAL_GPIO_Init+0x300>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x308>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d025      	beq.n	80012ca <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x30c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01f      	beq.n	80012c6 <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x310>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x314>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x318>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x20a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <HAL_GPIO_Init+0x31c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x206>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_GPIO_Init+0x320>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x202>
 80012ae:	2306      	movs	r3, #6
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_GPIO_Init+0x324>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae96 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0cc      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d90c      	bls.n	8001448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001436:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0b8      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800146a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001484:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	494d      	ldr	r1, [pc, #308]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d044      	beq.n	800152c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d119      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e07f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e067      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 0203 	bic.w	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4934      	ldr	r1, [pc, #208]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff fcc2 	bl	8000e84 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7ff fcbe 	bl	8000e84 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e04f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 020c 	and.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1eb      	bne.n	8001504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d20c      	bcs.n	8001554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e032      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	490e      	ldr	r1, [pc, #56]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001592:	f000 f855 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001596:	4602      	mov	r2, r0
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	490a      	ldr	r1, [pc, #40]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	5ccb      	ldrb	r3, [r1, r3]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc22 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	08002edc 	.word	0x08002edc
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_GetHCLKFreq+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000

080015f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f4:	f7ff fff0 	bl	80015d8 <HAL_RCC_GetHCLKFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	0a9b      	lsrs	r3, r3, #10
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	4903      	ldr	r1, [pc, #12]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	08002eec 	.word	0x08002eec

08001618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800161c:	f7ff ffdc 	bl	80015d8 <HAL_RCC_GetHCLKFreq>
 8001620:	4602      	mov	r2, r0
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	0b5b      	lsrs	r3, r3, #13
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	4903      	ldr	r1, [pc, #12]	; (800163c <HAL_RCC_GetPCLK2Freq+0x24>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	08002eec 	.word	0x08002eec

08001640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001644:	b0ae      	sub	sp, #184	; 0xb8
 8001646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001666:	4bcb      	ldr	r3, [pc, #812]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b0c      	cmp	r3, #12
 8001670:	f200 8206 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x440>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	080016b1 	.word	0x080016b1
 8001680:	08001a81 	.word	0x08001a81
 8001684:	08001a81 	.word	0x08001a81
 8001688:	08001a81 	.word	0x08001a81
 800168c:	080016b9 	.word	0x080016b9
 8001690:	08001a81 	.word	0x08001a81
 8001694:	08001a81 	.word	0x08001a81
 8001698:	08001a81 	.word	0x08001a81
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	08001a81 	.word	0x08001a81
 80016a4:	08001a81 	.word	0x08001a81
 80016a8:	08001a81 	.word	0x08001a81
 80016ac:	080018b1 	.word	0x080018b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016b0:	4bb9      	ldr	r3, [pc, #740]	; (8001998 <HAL_RCC_GetSysClockFreq+0x358>)
 80016b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016b6:	e1e7      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016b8:	4bb8      	ldr	r3, [pc, #736]	; (800199c <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016be:	e1e3      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c0:	4bb4      	ldr	r3, [pc, #720]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016cc:	4bb1      	ldr	r3, [pc, #708]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d071      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	4bae      	ldr	r3, [pc, #696]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016fe:	4622      	mov	r2, r4
 8001700:	462b      	mov	r3, r5
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	0159      	lsls	r1, r3, #5
 800170c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001710:	0150      	lsls	r0, r2, #5
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4621      	mov	r1, r4
 8001718:	1a51      	subs	r1, r2, r1
 800171a:	6439      	str	r1, [r7, #64]	; 0x40
 800171c:	4629      	mov	r1, r5
 800171e:	eb63 0301 	sbc.w	r3, r3, r1
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001730:	4649      	mov	r1, r9
 8001732:	018b      	lsls	r3, r1, #6
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800173a:	4641      	mov	r1, r8
 800173c:	018a      	lsls	r2, r1, #6
 800173e:	4641      	mov	r1, r8
 8001740:	1a51      	subs	r1, r2, r1
 8001742:	63b9      	str	r1, [r7, #56]	; 0x38
 8001744:	4649      	mov	r1, r9
 8001746:	eb63 0301 	sbc.w	r3, r3, r1
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001758:	4649      	mov	r1, r9
 800175a:	00cb      	lsls	r3, r1, #3
 800175c:	4641      	mov	r1, r8
 800175e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001762:	4641      	mov	r1, r8
 8001764:	00ca      	lsls	r2, r1, #3
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	4603      	mov	r3, r0
 800176c:	4622      	mov	r2, r4
 800176e:	189b      	adds	r3, r3, r2
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
 8001772:	462b      	mov	r3, r5
 8001774:	460a      	mov	r2, r1
 8001776:	eb42 0303 	adc.w	r3, r2, r3
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001788:	4629      	mov	r1, r5
 800178a:	024b      	lsls	r3, r1, #9
 800178c:	4621      	mov	r1, r4
 800178e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001792:	4621      	mov	r1, r4
 8001794:	024a      	lsls	r2, r1, #9
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800179e:	2200      	movs	r2, #0
 80017a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017ac:	f7fe fd80 	bl	80002b0 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ba:	e067      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017bc:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80017d6:	2300      	movs	r3, #0
 80017d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017de:	4622      	mov	r2, r4
 80017e0:	462b      	mov	r3, r5
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	0159      	lsls	r1, r3, #5
 80017ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f0:	0150      	lsls	r0, r2, #5
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4621      	mov	r1, r4
 80017f8:	1a51      	subs	r1, r2, r1
 80017fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80017fc:	4629      	mov	r1, r5
 80017fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001810:	4649      	mov	r1, r9
 8001812:	018b      	lsls	r3, r1, #6
 8001814:	4641      	mov	r1, r8
 8001816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181a:	4641      	mov	r1, r8
 800181c:	018a      	lsls	r2, r1, #6
 800181e:	4641      	mov	r1, r8
 8001820:	ebb2 0a01 	subs.w	sl, r2, r1
 8001824:	4649      	mov	r1, r9
 8001826:	eb63 0b01 	sbc.w	fp, r3, r1
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001836:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800183a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800183e:	4692      	mov	sl, r2
 8001840:	469b      	mov	fp, r3
 8001842:	4623      	mov	r3, r4
 8001844:	eb1a 0303 	adds.w	r3, sl, r3
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	462b      	mov	r3, r5
 800184c:	eb4b 0303 	adc.w	r3, fp, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800185e:	4629      	mov	r1, r5
 8001860:	028b      	lsls	r3, r1, #10
 8001862:	4621      	mov	r1, r4
 8001864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001868:	4621      	mov	r1, r4
 800186a:	028a      	lsls	r2, r1, #10
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001874:	2200      	movs	r2, #0
 8001876:	673b      	str	r3, [r7, #112]	; 0x70
 8001878:	677a      	str	r2, [r7, #116]	; 0x74
 800187a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800187e:	f7fe fd17 	bl	80002b0 <__aeabi_uldivmod>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4613      	mov	r3, r2
 8001888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800189e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ae:	e0eb      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d06b      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	2200      	movs	r2, #0
 80018d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80018d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
 80018dc:	2300      	movs	r3, #0
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
 80018e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018e4:	4622      	mov	r2, r4
 80018e6:	462b      	mov	r3, r5
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	0159      	lsls	r1, r3, #5
 80018f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f6:	0150      	lsls	r0, r2, #5
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4621      	mov	r1, r4
 80018fe:	1a51      	subs	r1, r2, r1
 8001900:	61b9      	str	r1, [r7, #24]
 8001902:	4629      	mov	r1, r5
 8001904:	eb63 0301 	sbc.w	r3, r3, r1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001916:	4659      	mov	r1, fp
 8001918:	018b      	lsls	r3, r1, #6
 800191a:	4651      	mov	r1, sl
 800191c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001920:	4651      	mov	r1, sl
 8001922:	018a      	lsls	r2, r1, #6
 8001924:	4651      	mov	r1, sl
 8001926:	ebb2 0801 	subs.w	r8, r2, r1
 800192a:	4659      	mov	r1, fp
 800192c:	eb63 0901 	sbc.w	r9, r3, r1
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001940:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001944:	4690      	mov	r8, r2
 8001946:	4699      	mov	r9, r3
 8001948:	4623      	mov	r3, r4
 800194a:	eb18 0303 	adds.w	r3, r8, r3
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	462b      	mov	r3, r5
 8001952:	eb49 0303 	adc.w	r3, r9, r3
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001964:	4629      	mov	r1, r5
 8001966:	024b      	lsls	r3, r1, #9
 8001968:	4621      	mov	r1, r4
 800196a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800196e:	4621      	mov	r1, r4
 8001970:	024a      	lsls	r2, r1, #9
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800197a:	2200      	movs	r2, #0
 800197c:	65bb      	str	r3, [r7, #88]	; 0x58
 800197e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001980:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001984:	f7fe fc94 	bl	80002b0 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001992:	e065      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x420>
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x458>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	2200      	movs	r2, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	4611      	mov	r1, r2
 80019ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019b0:	653b      	str	r3, [r7, #80]	; 0x50
 80019b2:	2300      	movs	r3, #0
 80019b4:	657b      	str	r3, [r7, #84]	; 0x54
 80019b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019ba:	4642      	mov	r2, r8
 80019bc:	464b      	mov	r3, r9
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4641      	mov	r1, r8
 80019d4:	1a51      	subs	r1, r2, r1
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	4649      	mov	r1, r9
 80019da:	eb63 0301 	sbc.w	r3, r3, r1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019ec:	4659      	mov	r1, fp
 80019ee:	018b      	lsls	r3, r1, #6
 80019f0:	4651      	mov	r1, sl
 80019f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f6:	4651      	mov	r1, sl
 80019f8:	018a      	lsls	r2, r1, #6
 80019fa:	4651      	mov	r1, sl
 80019fc:	1a54      	subs	r4, r2, r1
 80019fe:	4659      	mov	r1, fp
 8001a00:	eb63 0501 	sbc.w	r5, r3, r1
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	18e3      	adds	r3, r4, r3
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	464b      	mov	r3, r9
 8001a20:	eb45 0303 	adc.w	r3, r5, r3
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a32:	4629      	mov	r1, r5
 8001a34:	028b      	lsls	r3, r1, #10
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	028a      	lsls	r2, r1, #10
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a48:	2200      	movs	r2, #0
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a52:	f7fe fc2d 	bl	80002b0 <__aeabi_uldivmod>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0f1b      	lsrs	r3, r3, #28
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a7e:	e003      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	37b8      	adds	r7, #184	; 0xb8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	00f42400 	.word	0x00f42400

08001aa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e28d      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8083 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ac0:	4b94      	ldr	r3, [pc, #592]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d019      	beq.n	8001b00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001acc:	4b91      	ldr	r3, [pc, #580]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ad8:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae4:	d00c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d112      	bne.n	8001b18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d05b      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x124>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d157      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e25a      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x90>
 8001b22:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xcc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xb4>
 8001b3a:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a72      	ldr	r2, [pc, #456]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xcc>
 8001b54:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f986 	bl	8000e84 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f982 	bl	8000e84 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e21f      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xdc>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f972 	bl	8000e84 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f96e 	bl	8000e84 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e20b      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x104>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06f      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bd2:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bde:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d11c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d116      	bne.n	8001c3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x186>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1d3      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <HAL_RCC_OscConfig+0x278>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f91b 	bl	8000e84 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff f917 	bl	8000e84 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1b4      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4925      	ldr	r1, [pc, #148]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_RCC_OscConfig+0x278>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8fa 	bl	8000e84 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c94:	f7ff f8f6 	bl	8000e84 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e193      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d036      	beq.n	8001d2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d016      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f8da 	bl	8000e84 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f8d6 	bl	8000e84 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e173      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x234>
 8001cf2:	e01b      	b.n	8001d2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f8c3 	bl	8000e84 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	e00e      	b.n	8001d20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff f8bf 	bl	8000e84 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d907      	bls.n	8001d20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e15c      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
 8001d14:	40023800 	.word	0x40023800
 8001d18:	42470000 	.word	0x42470000
 8001d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	4b8a      	ldr	r3, [pc, #552]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ea      	bne.n	8001d02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8097 	beq.w	8001e68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3e:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a7e      	ldr	r2, [pc, #504]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b7c      	ldr	r3, [pc, #496]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f87f 	bl	8000e84 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7ff f87b 	bl	8000e84 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e118      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x31e>
 8001db0:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a65      	ldr	r2, [pc, #404]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x358>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x340>
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x358>
 8001de0:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a59      	ldr	r2, [pc, #356]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	f023 0304 	bic.w	r3, r3, #4
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f840 	bl	8000e84 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f83c 	bl	8000e84 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0d7      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ee      	beq.n	8001e08 <HAL_RCC_OscConfig+0x368>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f82a 	bl	8000e84 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff f826 	bl	8000e84 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0c1      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ee      	bne.n	8001e34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80ad 	beq.w	8001fcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d060      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d145      	bne.n	8001f12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x4b4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fffa 	bl	8000e84 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe fff6 	bl	8000e84 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e093      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	071b      	lsls	r3, r3, #28
 8001ede:	491b      	ldr	r1, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4b4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe ffcb 	bl	8000e84 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe ffc7 	bl	8000e84 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e064      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x452>
 8001f10:	e05c      	b.n	8001fcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x4b4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe ffb4 	bl	8000e84 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe ffb0 	bl	8000e84 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e04d      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x480>
 8001f3e:	e045      	b.n	8001fcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e040      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x538>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d030      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d129      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d122      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d119      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e03f      	b.n	800206e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fdf4 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f829 	bl	8002078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800207c:	b0c0      	sub	sp, #256	; 0x100
 800207e:	af00      	add	r7, sp, #0
 8002080:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	ea40 0301 	orr.w	r3, r0, r1
 80020a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020d0:	f021 010c 	bic.w	r1, r1, #12
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020de:	430b      	orrs	r3, r1
 80020e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f2:	6999      	ldr	r1, [r3, #24]
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	ea40 0301 	orr.w	r3, r0, r1
 80020fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b8f      	ldr	r3, [pc, #572]	; (8002344 <UART_SetConfig+0x2cc>)
 8002108:	429a      	cmp	r2, r3
 800210a:	d005      	beq.n	8002118 <UART_SetConfig+0xa0>
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b8d      	ldr	r3, [pc, #564]	; (8002348 <UART_SetConfig+0x2d0>)
 8002114:	429a      	cmp	r2, r3
 8002116:	d104      	bne.n	8002122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002118:	f7ff fa7e 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 800211c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002120:	e003      	b.n	800212a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002122:	f7ff fa65 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8002126:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002134:	f040 810c 	bne.w	8002350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800213c:	2200      	movs	r2, #0
 800213e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002142:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800214a:	4622      	mov	r2, r4
 800214c:	462b      	mov	r3, r5
 800214e:	1891      	adds	r1, r2, r2
 8002150:	65b9      	str	r1, [r7, #88]	; 0x58
 8002152:	415b      	adcs	r3, r3
 8002154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800215a:	4621      	mov	r1, r4
 800215c:	eb12 0801 	adds.w	r8, r2, r1
 8002160:	4629      	mov	r1, r5
 8002162:	eb43 0901 	adc.w	r9, r3, r1
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800217a:	4690      	mov	r8, r2
 800217c:	4699      	mov	r9, r3
 800217e:	4623      	mov	r3, r4
 8002180:	eb18 0303 	adds.w	r3, r8, r3
 8002184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002188:	462b      	mov	r3, r5
 800218a:	eb49 0303 	adc.w	r3, r9, r3
 800218e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800219e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021a6:	460b      	mov	r3, r1
 80021a8:	18db      	adds	r3, r3, r3
 80021aa:	653b      	str	r3, [r7, #80]	; 0x50
 80021ac:	4613      	mov	r3, r2
 80021ae:	eb42 0303 	adc.w	r3, r2, r3
 80021b2:	657b      	str	r3, [r7, #84]	; 0x54
 80021b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021bc:	f7fe f878 	bl	80002b0 <__aeabi_uldivmod>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <UART_SetConfig+0x2d4>)
 80021c6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	011c      	lsls	r4, r3, #4
 80021ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021e0:	4642      	mov	r2, r8
 80021e2:	464b      	mov	r3, r9
 80021e4:	1891      	adds	r1, r2, r2
 80021e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80021e8:	415b      	adcs	r3, r3
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021f0:	4641      	mov	r1, r8
 80021f2:	eb12 0a01 	adds.w	sl, r2, r1
 80021f6:	4649      	mov	r1, r9
 80021f8:	eb43 0b01 	adc.w	fp, r3, r1
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800220c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002210:	4692      	mov	sl, r2
 8002212:	469b      	mov	fp, r3
 8002214:	4643      	mov	r3, r8
 8002216:	eb1a 0303 	adds.w	r3, sl, r3
 800221a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800221e:	464b      	mov	r3, r9
 8002220:	eb4b 0303 	adc.w	r3, fp, r3
 8002224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002234:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800223c:	460b      	mov	r3, r1
 800223e:	18db      	adds	r3, r3, r3
 8002240:	643b      	str	r3, [r7, #64]	; 0x40
 8002242:	4613      	mov	r3, r2
 8002244:	eb42 0303 	adc.w	r3, r2, r3
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
 800224a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800224e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002252:	f7fe f82d 	bl	80002b0 <__aeabi_uldivmod>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4611      	mov	r1, r2
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <UART_SetConfig+0x2d4>)
 800225e:	fba3 2301 	umull	r2, r3, r3, r1
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2264      	movs	r2, #100	; 0x64
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	1acb      	subs	r3, r1, r3
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <UART_SetConfig+0x2d4>)
 8002274:	fba3 2302 	umull	r2, r3, r3, r2
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002280:	441c      	add	r4, r3
 8002282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002286:	2200      	movs	r2, #0
 8002288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800228c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002294:	4642      	mov	r2, r8
 8002296:	464b      	mov	r3, r9
 8002298:	1891      	adds	r1, r2, r2
 800229a:	63b9      	str	r1, [r7, #56]	; 0x38
 800229c:	415b      	adcs	r3, r3
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022a4:	4641      	mov	r1, r8
 80022a6:	1851      	adds	r1, r2, r1
 80022a8:	6339      	str	r1, [r7, #48]	; 0x30
 80022aa:	4649      	mov	r1, r9
 80022ac:	414b      	adcs	r3, r1
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022bc:	4659      	mov	r1, fp
 80022be:	00cb      	lsls	r3, r1, #3
 80022c0:	4651      	mov	r1, sl
 80022c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022c6:	4651      	mov	r1, sl
 80022c8:	00ca      	lsls	r2, r1, #3
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	4642      	mov	r2, r8
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022d8:	464b      	mov	r3, r9
 80022da:	460a      	mov	r2, r1
 80022dc:	eb42 0303 	adc.w	r3, r2, r3
 80022e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022f8:	460b      	mov	r3, r1
 80022fa:	18db      	adds	r3, r3, r3
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fe:	4613      	mov	r3, r2
 8002300:	eb42 0303 	adc.w	r3, r2, r3
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800230a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800230e:	f7fd ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <UART_SetConfig+0x2d4>)
 8002318:	fba3 1302 	umull	r1, r3, r3, r2
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	2164      	movs	r1, #100	; 0x64
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	3332      	adds	r3, #50	; 0x32
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <UART_SetConfig+0x2d4>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	f003 0207 	and.w	r2, r3, #7
 8002336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4422      	add	r2, r4
 800233e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002340:	e105      	b.n	800254e <UART_SetConfig+0x4d6>
 8002342:	bf00      	nop
 8002344:	40011000 	.word	0x40011000
 8002348:	40011400 	.word	0x40011400
 800234c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002354:	2200      	movs	r2, #0
 8002356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800235a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800235e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002362:	4642      	mov	r2, r8
 8002364:	464b      	mov	r3, r9
 8002366:	1891      	adds	r1, r2, r2
 8002368:	6239      	str	r1, [r7, #32]
 800236a:	415b      	adcs	r3, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002372:	4641      	mov	r1, r8
 8002374:	1854      	adds	r4, r2, r1
 8002376:	4649      	mov	r1, r9
 8002378:	eb43 0501 	adc.w	r5, r3, r1
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	00eb      	lsls	r3, r5, #3
 8002386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800238a:	00e2      	lsls	r2, r4, #3
 800238c:	4614      	mov	r4, r2
 800238e:	461d      	mov	r5, r3
 8002390:	4643      	mov	r3, r8
 8002392:	18e3      	adds	r3, r4, r3
 8002394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002398:	464b      	mov	r3, r9
 800239a:	eb45 0303 	adc.w	r3, r5, r3
 800239e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023be:	4629      	mov	r1, r5
 80023c0:	008b      	lsls	r3, r1, #2
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023c8:	4621      	mov	r1, r4
 80023ca:	008a      	lsls	r2, r1, #2
 80023cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023d0:	f7fd ff6e 	bl	80002b0 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4b60      	ldr	r3, [pc, #384]	; (800255c <UART_SetConfig+0x4e4>)
 80023da:	fba3 2302 	umull	r2, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	011c      	lsls	r4, r3, #4
 80023e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e6:	2200      	movs	r2, #0
 80023e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023f4:	4642      	mov	r2, r8
 80023f6:	464b      	mov	r3, r9
 80023f8:	1891      	adds	r1, r2, r2
 80023fa:	61b9      	str	r1, [r7, #24]
 80023fc:	415b      	adcs	r3, r3
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002404:	4641      	mov	r1, r8
 8002406:	1851      	adds	r1, r2, r1
 8002408:	6139      	str	r1, [r7, #16]
 800240a:	4649      	mov	r1, r9
 800240c:	414b      	adcs	r3, r1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800241c:	4659      	mov	r1, fp
 800241e:	00cb      	lsls	r3, r1, #3
 8002420:	4651      	mov	r1, sl
 8002422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002426:	4651      	mov	r1, sl
 8002428:	00ca      	lsls	r2, r1, #3
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	4603      	mov	r3, r0
 8002430:	4642      	mov	r2, r8
 8002432:	189b      	adds	r3, r3, r2
 8002434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002438:	464b      	mov	r3, r9
 800243a:	460a      	mov	r2, r1
 800243c:	eb42 0303 	adc.w	r3, r2, r3
 8002440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	67bb      	str	r3, [r7, #120]	; 0x78
 800244e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800245c:	4649      	mov	r1, r9
 800245e:	008b      	lsls	r3, r1, #2
 8002460:	4641      	mov	r1, r8
 8002462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002466:	4641      	mov	r1, r8
 8002468:	008a      	lsls	r2, r1, #2
 800246a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800246e:	f7fd ff1f 	bl	80002b0 <__aeabi_uldivmod>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <UART_SetConfig+0x4e4>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	; 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a34      	ldr	r2, [pc, #208]	; (800255c <UART_SetConfig+0x4e4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002496:	441c      	add	r4, r3
 8002498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249c:	2200      	movs	r2, #0
 800249e:	673b      	str	r3, [r7, #112]	; 0x70
 80024a0:	677a      	str	r2, [r7, #116]	; 0x74
 80024a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024a6:	4642      	mov	r2, r8
 80024a8:	464b      	mov	r3, r9
 80024aa:	1891      	adds	r1, r2, r2
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	415b      	adcs	r3, r3
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b6:	4641      	mov	r1, r8
 80024b8:	1851      	adds	r1, r2, r1
 80024ba:	6039      	str	r1, [r7, #0]
 80024bc:	4649      	mov	r1, r9
 80024be:	414b      	adcs	r3, r1
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024ce:	4659      	mov	r1, fp
 80024d0:	00cb      	lsls	r3, r1, #3
 80024d2:	4651      	mov	r1, sl
 80024d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d8:	4651      	mov	r1, sl
 80024da:	00ca      	lsls	r2, r1, #3
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	4642      	mov	r2, r8
 80024e4:	189b      	adds	r3, r3, r2
 80024e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024e8:	464b      	mov	r3, r9
 80024ea:	460a      	mov	r2, r1
 80024ec:	eb42 0303 	adc.w	r3, r2, r3
 80024f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	663b      	str	r3, [r7, #96]	; 0x60
 80024fc:	667a      	str	r2, [r7, #100]	; 0x64
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800250a:	4649      	mov	r1, r9
 800250c:	008b      	lsls	r3, r1, #2
 800250e:	4641      	mov	r1, r8
 8002510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002514:	4641      	mov	r1, r8
 8002516:	008a      	lsls	r2, r1, #2
 8002518:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800251c:	f7fd fec8 	bl	80002b0 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <UART_SetConfig+0x4e4>)
 8002526:	fba3 1302 	umull	r1, r3, r3, r2
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2164      	movs	r1, #100	; 0x64
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	3332      	adds	r3, #50	; 0x32
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <UART_SetConfig+0x4e4>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	f003 020f 	and.w	r2, r3, #15
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4422      	add	r2, r4
 800254c:	609a      	str	r2, [r3, #8]
}
 800254e:	bf00      	nop
 8002550:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002554:	46bd      	mov	sp, r7
 8002556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255a:	bf00      	nop
 800255c:	51eb851f 	.word	0x51eb851f

08002560 <__errno>:
 8002560:	4b01      	ldr	r3, [pc, #4]	; (8002568 <__errno+0x8>)
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000000c 	.word	0x2000000c

0800256c <__libc_init_array>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	4d0d      	ldr	r5, [pc, #52]	; (80025a4 <__libc_init_array+0x38>)
 8002570:	4c0d      	ldr	r4, [pc, #52]	; (80025a8 <__libc_init_array+0x3c>)
 8002572:	1b64      	subs	r4, r4, r5
 8002574:	10a4      	asrs	r4, r4, #2
 8002576:	2600      	movs	r6, #0
 8002578:	42a6      	cmp	r6, r4
 800257a:	d109      	bne.n	8002590 <__libc_init_array+0x24>
 800257c:	4d0b      	ldr	r5, [pc, #44]	; (80025ac <__libc_init_array+0x40>)
 800257e:	4c0c      	ldr	r4, [pc, #48]	; (80025b0 <__libc_init_array+0x44>)
 8002580:	f000 fc8e 	bl	8002ea0 <_init>
 8002584:	1b64      	subs	r4, r4, r5
 8002586:	10a4      	asrs	r4, r4, #2
 8002588:	2600      	movs	r6, #0
 800258a:	42a6      	cmp	r6, r4
 800258c:	d105      	bne.n	800259a <__libc_init_array+0x2e>
 800258e:	bd70      	pop	{r4, r5, r6, pc}
 8002590:	f855 3b04 	ldr.w	r3, [r5], #4
 8002594:	4798      	blx	r3
 8002596:	3601      	adds	r6, #1
 8002598:	e7ee      	b.n	8002578 <__libc_init_array+0xc>
 800259a:	f855 3b04 	ldr.w	r3, [r5], #4
 800259e:	4798      	blx	r3
 80025a0:	3601      	adds	r6, #1
 80025a2:	e7f2      	b.n	800258a <__libc_init_array+0x1e>
 80025a4:	08002f30 	.word	0x08002f30
 80025a8:	08002f30 	.word	0x08002f30
 80025ac:	08002f30 	.word	0x08002f30
 80025b0:	08002f34 	.word	0x08002f34

080025b4 <memset>:
 80025b4:	4402      	add	r2, r0
 80025b6:	4603      	mov	r3, r0
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d100      	bne.n	80025be <memset+0xa>
 80025bc:	4770      	bx	lr
 80025be:	f803 1b01 	strb.w	r1, [r3], #1
 80025c2:	e7f9      	b.n	80025b8 <memset+0x4>

080025c4 <siprintf>:
 80025c4:	b40e      	push	{r1, r2, r3}
 80025c6:	b500      	push	{lr}
 80025c8:	b09c      	sub	sp, #112	; 0x70
 80025ca:	ab1d      	add	r3, sp, #116	; 0x74
 80025cc:	9002      	str	r0, [sp, #8]
 80025ce:	9006      	str	r0, [sp, #24]
 80025d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <siprintf+0x38>)
 80025d6:	9107      	str	r1, [sp, #28]
 80025d8:	9104      	str	r1, [sp, #16]
 80025da:	4909      	ldr	r1, [pc, #36]	; (8002600 <siprintf+0x3c>)
 80025dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80025e0:	9105      	str	r1, [sp, #20]
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	a902      	add	r1, sp, #8
 80025e8:	f000 f868 	bl	80026bc <_svfiprintf_r>
 80025ec:	9b02      	ldr	r3, [sp, #8]
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	b01c      	add	sp, #112	; 0x70
 80025f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80025f8:	b003      	add	sp, #12
 80025fa:	4770      	bx	lr
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	ffff0208 	.word	0xffff0208

08002604 <__ssputs_r>:
 8002604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002608:	688e      	ldr	r6, [r1, #8]
 800260a:	429e      	cmp	r6, r3
 800260c:	4682      	mov	sl, r0
 800260e:	460c      	mov	r4, r1
 8002610:	4690      	mov	r8, r2
 8002612:	461f      	mov	r7, r3
 8002614:	d838      	bhi.n	8002688 <__ssputs_r+0x84>
 8002616:	898a      	ldrh	r2, [r1, #12]
 8002618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800261c:	d032      	beq.n	8002684 <__ssputs_r+0x80>
 800261e:	6825      	ldr	r5, [r4, #0]
 8002620:	6909      	ldr	r1, [r1, #16]
 8002622:	eba5 0901 	sub.w	r9, r5, r1
 8002626:	6965      	ldr	r5, [r4, #20]
 8002628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800262c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002630:	3301      	adds	r3, #1
 8002632:	444b      	add	r3, r9
 8002634:	106d      	asrs	r5, r5, #1
 8002636:	429d      	cmp	r5, r3
 8002638:	bf38      	it	cc
 800263a:	461d      	movcc	r5, r3
 800263c:	0553      	lsls	r3, r2, #21
 800263e:	d531      	bpl.n	80026a4 <__ssputs_r+0xa0>
 8002640:	4629      	mov	r1, r5
 8002642:	f000 fb63 	bl	8002d0c <_malloc_r>
 8002646:	4606      	mov	r6, r0
 8002648:	b950      	cbnz	r0, 8002660 <__ssputs_r+0x5c>
 800264a:	230c      	movs	r3, #12
 800264c:	f8ca 3000 	str.w	r3, [sl]
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002656:	81a3      	strh	r3, [r4, #12]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800265c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002660:	6921      	ldr	r1, [r4, #16]
 8002662:	464a      	mov	r2, r9
 8002664:	f000 fabe 	bl	8002be4 <memcpy>
 8002668:	89a3      	ldrh	r3, [r4, #12]
 800266a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800266e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002672:	81a3      	strh	r3, [r4, #12]
 8002674:	6126      	str	r6, [r4, #16]
 8002676:	6165      	str	r5, [r4, #20]
 8002678:	444e      	add	r6, r9
 800267a:	eba5 0509 	sub.w	r5, r5, r9
 800267e:	6026      	str	r6, [r4, #0]
 8002680:	60a5      	str	r5, [r4, #8]
 8002682:	463e      	mov	r6, r7
 8002684:	42be      	cmp	r6, r7
 8002686:	d900      	bls.n	800268a <__ssputs_r+0x86>
 8002688:	463e      	mov	r6, r7
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	4632      	mov	r2, r6
 800268e:	4641      	mov	r1, r8
 8002690:	f000 fab6 	bl	8002c00 <memmove>
 8002694:	68a3      	ldr	r3, [r4, #8]
 8002696:	1b9b      	subs	r3, r3, r6
 8002698:	60a3      	str	r3, [r4, #8]
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	4433      	add	r3, r6
 800269e:	6023      	str	r3, [r4, #0]
 80026a0:	2000      	movs	r0, #0
 80026a2:	e7db      	b.n	800265c <__ssputs_r+0x58>
 80026a4:	462a      	mov	r2, r5
 80026a6:	f000 fba5 	bl	8002df4 <_realloc_r>
 80026aa:	4606      	mov	r6, r0
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d1e1      	bne.n	8002674 <__ssputs_r+0x70>
 80026b0:	6921      	ldr	r1, [r4, #16]
 80026b2:	4650      	mov	r0, sl
 80026b4:	f000 fabe 	bl	8002c34 <_free_r>
 80026b8:	e7c7      	b.n	800264a <__ssputs_r+0x46>
	...

080026bc <_svfiprintf_r>:
 80026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	4698      	mov	r8, r3
 80026c2:	898b      	ldrh	r3, [r1, #12]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	b09d      	sub	sp, #116	; 0x74
 80026c8:	4607      	mov	r7, r0
 80026ca:	460d      	mov	r5, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	d50e      	bpl.n	80026ee <_svfiprintf_r+0x32>
 80026d0:	690b      	ldr	r3, [r1, #16]
 80026d2:	b963      	cbnz	r3, 80026ee <_svfiprintf_r+0x32>
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	f000 fb19 	bl	8002d0c <_malloc_r>
 80026da:	6028      	str	r0, [r5, #0]
 80026dc:	6128      	str	r0, [r5, #16]
 80026de:	b920      	cbnz	r0, 80026ea <_svfiprintf_r+0x2e>
 80026e0:	230c      	movs	r3, #12
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e8:	e0d1      	b.n	800288e <_svfiprintf_r+0x1d2>
 80026ea:	2340      	movs	r3, #64	; 0x40
 80026ec:	616b      	str	r3, [r5, #20]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9309      	str	r3, [sp, #36]	; 0x24
 80026f2:	2320      	movs	r3, #32
 80026f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80026fc:	2330      	movs	r3, #48	; 0x30
 80026fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80028a8 <_svfiprintf_r+0x1ec>
 8002702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002706:	f04f 0901 	mov.w	r9, #1
 800270a:	4623      	mov	r3, r4
 800270c:	469a      	mov	sl, r3
 800270e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002712:	b10a      	cbz	r2, 8002718 <_svfiprintf_r+0x5c>
 8002714:	2a25      	cmp	r2, #37	; 0x25
 8002716:	d1f9      	bne.n	800270c <_svfiprintf_r+0x50>
 8002718:	ebba 0b04 	subs.w	fp, sl, r4
 800271c:	d00b      	beq.n	8002736 <_svfiprintf_r+0x7a>
 800271e:	465b      	mov	r3, fp
 8002720:	4622      	mov	r2, r4
 8002722:	4629      	mov	r1, r5
 8002724:	4638      	mov	r0, r7
 8002726:	f7ff ff6d 	bl	8002604 <__ssputs_r>
 800272a:	3001      	adds	r0, #1
 800272c:	f000 80aa 	beq.w	8002884 <_svfiprintf_r+0x1c8>
 8002730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002732:	445a      	add	r2, fp
 8002734:	9209      	str	r2, [sp, #36]	; 0x24
 8002736:	f89a 3000 	ldrb.w	r3, [sl]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a2 	beq.w	8002884 <_svfiprintf_r+0x1c8>
 8002740:	2300      	movs	r3, #0
 8002742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800274a:	f10a 0a01 	add.w	sl, sl, #1
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	9307      	str	r3, [sp, #28]
 8002752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002756:	931a      	str	r3, [sp, #104]	; 0x68
 8002758:	4654      	mov	r4, sl
 800275a:	2205      	movs	r2, #5
 800275c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002760:	4851      	ldr	r0, [pc, #324]	; (80028a8 <_svfiprintf_r+0x1ec>)
 8002762:	f7fd fd55 	bl	8000210 <memchr>
 8002766:	9a04      	ldr	r2, [sp, #16]
 8002768:	b9d8      	cbnz	r0, 80027a2 <_svfiprintf_r+0xe6>
 800276a:	06d0      	lsls	r0, r2, #27
 800276c:	bf44      	itt	mi
 800276e:	2320      	movmi	r3, #32
 8002770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002774:	0711      	lsls	r1, r2, #28
 8002776:	bf44      	itt	mi
 8002778:	232b      	movmi	r3, #43	; 0x2b
 800277a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800277e:	f89a 3000 	ldrb.w	r3, [sl]
 8002782:	2b2a      	cmp	r3, #42	; 0x2a
 8002784:	d015      	beq.n	80027b2 <_svfiprintf_r+0xf6>
 8002786:	9a07      	ldr	r2, [sp, #28]
 8002788:	4654      	mov	r4, sl
 800278a:	2000      	movs	r0, #0
 800278c:	f04f 0c0a 	mov.w	ip, #10
 8002790:	4621      	mov	r1, r4
 8002792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002796:	3b30      	subs	r3, #48	; 0x30
 8002798:	2b09      	cmp	r3, #9
 800279a:	d94e      	bls.n	800283a <_svfiprintf_r+0x17e>
 800279c:	b1b0      	cbz	r0, 80027cc <_svfiprintf_r+0x110>
 800279e:	9207      	str	r2, [sp, #28]
 80027a0:	e014      	b.n	80027cc <_svfiprintf_r+0x110>
 80027a2:	eba0 0308 	sub.w	r3, r0, r8
 80027a6:	fa09 f303 	lsl.w	r3, r9, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	9304      	str	r3, [sp, #16]
 80027ae:	46a2      	mov	sl, r4
 80027b0:	e7d2      	b.n	8002758 <_svfiprintf_r+0x9c>
 80027b2:	9b03      	ldr	r3, [sp, #12]
 80027b4:	1d19      	adds	r1, r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	9103      	str	r1, [sp, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bfbb      	ittet	lt
 80027be:	425b      	neglt	r3, r3
 80027c0:	f042 0202 	orrlt.w	r2, r2, #2
 80027c4:	9307      	strge	r3, [sp, #28]
 80027c6:	9307      	strlt	r3, [sp, #28]
 80027c8:	bfb8      	it	lt
 80027ca:	9204      	strlt	r2, [sp, #16]
 80027cc:	7823      	ldrb	r3, [r4, #0]
 80027ce:	2b2e      	cmp	r3, #46	; 0x2e
 80027d0:	d10c      	bne.n	80027ec <_svfiprintf_r+0x130>
 80027d2:	7863      	ldrb	r3, [r4, #1]
 80027d4:	2b2a      	cmp	r3, #42	; 0x2a
 80027d6:	d135      	bne.n	8002844 <_svfiprintf_r+0x188>
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	9203      	str	r2, [sp, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bfb8      	it	lt
 80027e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027e8:	3402      	adds	r4, #2
 80027ea:	9305      	str	r3, [sp, #20]
 80027ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80028b8 <_svfiprintf_r+0x1fc>
 80027f0:	7821      	ldrb	r1, [r4, #0]
 80027f2:	2203      	movs	r2, #3
 80027f4:	4650      	mov	r0, sl
 80027f6:	f7fd fd0b 	bl	8000210 <memchr>
 80027fa:	b140      	cbz	r0, 800280e <_svfiprintf_r+0x152>
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	eba0 000a 	sub.w	r0, r0, sl
 8002802:	fa03 f000 	lsl.w	r0, r3, r0
 8002806:	9b04      	ldr	r3, [sp, #16]
 8002808:	4303      	orrs	r3, r0
 800280a:	3401      	adds	r4, #1
 800280c:	9304      	str	r3, [sp, #16]
 800280e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002812:	4826      	ldr	r0, [pc, #152]	; (80028ac <_svfiprintf_r+0x1f0>)
 8002814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002818:	2206      	movs	r2, #6
 800281a:	f7fd fcf9 	bl	8000210 <memchr>
 800281e:	2800      	cmp	r0, #0
 8002820:	d038      	beq.n	8002894 <_svfiprintf_r+0x1d8>
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <_svfiprintf_r+0x1f4>)
 8002824:	bb1b      	cbnz	r3, 800286e <_svfiprintf_r+0x1b2>
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	3307      	adds	r3, #7
 800282a:	f023 0307 	bic.w	r3, r3, #7
 800282e:	3308      	adds	r3, #8
 8002830:	9303      	str	r3, [sp, #12]
 8002832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002834:	4433      	add	r3, r6
 8002836:	9309      	str	r3, [sp, #36]	; 0x24
 8002838:	e767      	b.n	800270a <_svfiprintf_r+0x4e>
 800283a:	fb0c 3202 	mla	r2, ip, r2, r3
 800283e:	460c      	mov	r4, r1
 8002840:	2001      	movs	r0, #1
 8002842:	e7a5      	b.n	8002790 <_svfiprintf_r+0xd4>
 8002844:	2300      	movs	r3, #0
 8002846:	3401      	adds	r4, #1
 8002848:	9305      	str	r3, [sp, #20]
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 0c0a 	mov.w	ip, #10
 8002850:	4620      	mov	r0, r4
 8002852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002856:	3a30      	subs	r2, #48	; 0x30
 8002858:	2a09      	cmp	r2, #9
 800285a:	d903      	bls.n	8002864 <_svfiprintf_r+0x1a8>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0c5      	beq.n	80027ec <_svfiprintf_r+0x130>
 8002860:	9105      	str	r1, [sp, #20]
 8002862:	e7c3      	b.n	80027ec <_svfiprintf_r+0x130>
 8002864:	fb0c 2101 	mla	r1, ip, r1, r2
 8002868:	4604      	mov	r4, r0
 800286a:	2301      	movs	r3, #1
 800286c:	e7f0      	b.n	8002850 <_svfiprintf_r+0x194>
 800286e:	ab03      	add	r3, sp, #12
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	462a      	mov	r2, r5
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <_svfiprintf_r+0x1f8>)
 8002876:	a904      	add	r1, sp, #16
 8002878:	4638      	mov	r0, r7
 800287a:	f3af 8000 	nop.w
 800287e:	1c42      	adds	r2, r0, #1
 8002880:	4606      	mov	r6, r0
 8002882:	d1d6      	bne.n	8002832 <_svfiprintf_r+0x176>
 8002884:	89ab      	ldrh	r3, [r5, #12]
 8002886:	065b      	lsls	r3, r3, #25
 8002888:	f53f af2c 	bmi.w	80026e4 <_svfiprintf_r+0x28>
 800288c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800288e:	b01d      	add	sp, #116	; 0x74
 8002890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002894:	ab03      	add	r3, sp, #12
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	462a      	mov	r2, r5
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <_svfiprintf_r+0x1f8>)
 800289c:	a904      	add	r1, sp, #16
 800289e:	4638      	mov	r0, r7
 80028a0:	f000 f87a 	bl	8002998 <_printf_i>
 80028a4:	e7eb      	b.n	800287e <_svfiprintf_r+0x1c2>
 80028a6:	bf00      	nop
 80028a8:	08002ef4 	.word	0x08002ef4
 80028ac:	08002efe 	.word	0x08002efe
 80028b0:	00000000 	.word	0x00000000
 80028b4:	08002605 	.word	0x08002605
 80028b8:	08002efa 	.word	0x08002efa

080028bc <_printf_common>:
 80028bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c0:	4616      	mov	r6, r2
 80028c2:	4699      	mov	r9, r3
 80028c4:	688a      	ldr	r2, [r1, #8]
 80028c6:	690b      	ldr	r3, [r1, #16]
 80028c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bfb8      	it	lt
 80028d0:	4613      	movlt	r3, r2
 80028d2:	6033      	str	r3, [r6, #0]
 80028d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028d8:	4607      	mov	r7, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	b10a      	cbz	r2, 80028e2 <_printf_common+0x26>
 80028de:	3301      	adds	r3, #1
 80028e0:	6033      	str	r3, [r6, #0]
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	0699      	lsls	r1, r3, #26
 80028e6:	bf42      	ittt	mi
 80028e8:	6833      	ldrmi	r3, [r6, #0]
 80028ea:	3302      	addmi	r3, #2
 80028ec:	6033      	strmi	r3, [r6, #0]
 80028ee:	6825      	ldr	r5, [r4, #0]
 80028f0:	f015 0506 	ands.w	r5, r5, #6
 80028f4:	d106      	bne.n	8002904 <_printf_common+0x48>
 80028f6:	f104 0a19 	add.w	sl, r4, #25
 80028fa:	68e3      	ldr	r3, [r4, #12]
 80028fc:	6832      	ldr	r2, [r6, #0]
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	42ab      	cmp	r3, r5
 8002902:	dc26      	bgt.n	8002952 <_printf_common+0x96>
 8002904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002908:	1e13      	subs	r3, r2, #0
 800290a:	6822      	ldr	r2, [r4, #0]
 800290c:	bf18      	it	ne
 800290e:	2301      	movne	r3, #1
 8002910:	0692      	lsls	r2, r2, #26
 8002912:	d42b      	bmi.n	800296c <_printf_common+0xb0>
 8002914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002918:	4649      	mov	r1, r9
 800291a:	4638      	mov	r0, r7
 800291c:	47c0      	blx	r8
 800291e:	3001      	adds	r0, #1
 8002920:	d01e      	beq.n	8002960 <_printf_common+0xa4>
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	68e5      	ldr	r5, [r4, #12]
 8002926:	6832      	ldr	r2, [r6, #0]
 8002928:	f003 0306 	and.w	r3, r3, #6
 800292c:	2b04      	cmp	r3, #4
 800292e:	bf08      	it	eq
 8002930:	1aad      	subeq	r5, r5, r2
 8002932:	68a3      	ldr	r3, [r4, #8]
 8002934:	6922      	ldr	r2, [r4, #16]
 8002936:	bf0c      	ite	eq
 8002938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800293c:	2500      	movne	r5, #0
 800293e:	4293      	cmp	r3, r2
 8002940:	bfc4      	itt	gt
 8002942:	1a9b      	subgt	r3, r3, r2
 8002944:	18ed      	addgt	r5, r5, r3
 8002946:	2600      	movs	r6, #0
 8002948:	341a      	adds	r4, #26
 800294a:	42b5      	cmp	r5, r6
 800294c:	d11a      	bne.n	8002984 <_printf_common+0xc8>
 800294e:	2000      	movs	r0, #0
 8002950:	e008      	b.n	8002964 <_printf_common+0xa8>
 8002952:	2301      	movs	r3, #1
 8002954:	4652      	mov	r2, sl
 8002956:	4649      	mov	r1, r9
 8002958:	4638      	mov	r0, r7
 800295a:	47c0      	blx	r8
 800295c:	3001      	adds	r0, #1
 800295e:	d103      	bne.n	8002968 <_printf_common+0xac>
 8002960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002968:	3501      	adds	r5, #1
 800296a:	e7c6      	b.n	80028fa <_printf_common+0x3e>
 800296c:	18e1      	adds	r1, r4, r3
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	2030      	movs	r0, #48	; 0x30
 8002972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002976:	4422      	add	r2, r4
 8002978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800297c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002980:	3302      	adds	r3, #2
 8002982:	e7c7      	b.n	8002914 <_printf_common+0x58>
 8002984:	2301      	movs	r3, #1
 8002986:	4622      	mov	r2, r4
 8002988:	4649      	mov	r1, r9
 800298a:	4638      	mov	r0, r7
 800298c:	47c0      	blx	r8
 800298e:	3001      	adds	r0, #1
 8002990:	d0e6      	beq.n	8002960 <_printf_common+0xa4>
 8002992:	3601      	adds	r6, #1
 8002994:	e7d9      	b.n	800294a <_printf_common+0x8e>
	...

08002998 <_printf_i>:
 8002998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	7e0f      	ldrb	r7, [r1, #24]
 800299e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029a0:	2f78      	cmp	r7, #120	; 0x78
 80029a2:	4691      	mov	r9, r2
 80029a4:	4680      	mov	r8, r0
 80029a6:	460c      	mov	r4, r1
 80029a8:	469a      	mov	sl, r3
 80029aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029ae:	d807      	bhi.n	80029c0 <_printf_i+0x28>
 80029b0:	2f62      	cmp	r7, #98	; 0x62
 80029b2:	d80a      	bhi.n	80029ca <_printf_i+0x32>
 80029b4:	2f00      	cmp	r7, #0
 80029b6:	f000 80d8 	beq.w	8002b6a <_printf_i+0x1d2>
 80029ba:	2f58      	cmp	r7, #88	; 0x58
 80029bc:	f000 80a3 	beq.w	8002b06 <_printf_i+0x16e>
 80029c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029c8:	e03a      	b.n	8002a40 <_printf_i+0xa8>
 80029ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029ce:	2b15      	cmp	r3, #21
 80029d0:	d8f6      	bhi.n	80029c0 <_printf_i+0x28>
 80029d2:	a101      	add	r1, pc, #4	; (adr r1, 80029d8 <_printf_i+0x40>)
 80029d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029d8:	08002a31 	.word	0x08002a31
 80029dc:	08002a45 	.word	0x08002a45
 80029e0:	080029c1 	.word	0x080029c1
 80029e4:	080029c1 	.word	0x080029c1
 80029e8:	080029c1 	.word	0x080029c1
 80029ec:	080029c1 	.word	0x080029c1
 80029f0:	08002a45 	.word	0x08002a45
 80029f4:	080029c1 	.word	0x080029c1
 80029f8:	080029c1 	.word	0x080029c1
 80029fc:	080029c1 	.word	0x080029c1
 8002a00:	080029c1 	.word	0x080029c1
 8002a04:	08002b51 	.word	0x08002b51
 8002a08:	08002a75 	.word	0x08002a75
 8002a0c:	08002b33 	.word	0x08002b33
 8002a10:	080029c1 	.word	0x080029c1
 8002a14:	080029c1 	.word	0x080029c1
 8002a18:	08002b73 	.word	0x08002b73
 8002a1c:	080029c1 	.word	0x080029c1
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	080029c1 	.word	0x080029c1
 8002a28:	080029c1 	.word	0x080029c1
 8002a2c:	08002b3b 	.word	0x08002b3b
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	1d1a      	adds	r2, r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	602a      	str	r2, [r5, #0]
 8002a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0a3      	b.n	8002b8c <_printf_i+0x1f4>
 8002a44:	6820      	ldr	r0, [r4, #0]
 8002a46:	6829      	ldr	r1, [r5, #0]
 8002a48:	0606      	lsls	r6, r0, #24
 8002a4a:	f101 0304 	add.w	r3, r1, #4
 8002a4e:	d50a      	bpl.n	8002a66 <_printf_i+0xce>
 8002a50:	680e      	ldr	r6, [r1, #0]
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	2e00      	cmp	r6, #0
 8002a56:	da03      	bge.n	8002a60 <_printf_i+0xc8>
 8002a58:	232d      	movs	r3, #45	; 0x2d
 8002a5a:	4276      	negs	r6, r6
 8002a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a60:	485e      	ldr	r0, [pc, #376]	; (8002bdc <_printf_i+0x244>)
 8002a62:	230a      	movs	r3, #10
 8002a64:	e019      	b.n	8002a9a <_printf_i+0x102>
 8002a66:	680e      	ldr	r6, [r1, #0]
 8002a68:	602b      	str	r3, [r5, #0]
 8002a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a6e:	bf18      	it	ne
 8002a70:	b236      	sxthne	r6, r6
 8002a72:	e7ef      	b.n	8002a54 <_printf_i+0xbc>
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	6820      	ldr	r0, [r4, #0]
 8002a78:	1d19      	adds	r1, r3, #4
 8002a7a:	6029      	str	r1, [r5, #0]
 8002a7c:	0601      	lsls	r1, r0, #24
 8002a7e:	d501      	bpl.n	8002a84 <_printf_i+0xec>
 8002a80:	681e      	ldr	r6, [r3, #0]
 8002a82:	e002      	b.n	8002a8a <_printf_i+0xf2>
 8002a84:	0646      	lsls	r6, r0, #25
 8002a86:	d5fb      	bpl.n	8002a80 <_printf_i+0xe8>
 8002a88:	881e      	ldrh	r6, [r3, #0]
 8002a8a:	4854      	ldr	r0, [pc, #336]	; (8002bdc <_printf_i+0x244>)
 8002a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8002a8e:	bf0c      	ite	eq
 8002a90:	2308      	moveq	r3, #8
 8002a92:	230a      	movne	r3, #10
 8002a94:	2100      	movs	r1, #0
 8002a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a9a:	6865      	ldr	r5, [r4, #4]
 8002a9c:	60a5      	str	r5, [r4, #8]
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	bfa2      	ittt	ge
 8002aa2:	6821      	ldrge	r1, [r4, #0]
 8002aa4:	f021 0104 	bicge.w	r1, r1, #4
 8002aa8:	6021      	strge	r1, [r4, #0]
 8002aaa:	b90e      	cbnz	r6, 8002ab0 <_printf_i+0x118>
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d04d      	beq.n	8002b4c <_printf_i+0x1b4>
 8002ab0:	4615      	mov	r5, r2
 8002ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8002aba:	5dc7      	ldrb	r7, [r0, r7]
 8002abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ac0:	4637      	mov	r7, r6
 8002ac2:	42bb      	cmp	r3, r7
 8002ac4:	460e      	mov	r6, r1
 8002ac6:	d9f4      	bls.n	8002ab2 <_printf_i+0x11a>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d10b      	bne.n	8002ae4 <_printf_i+0x14c>
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	07de      	lsls	r6, r3, #31
 8002ad0:	d508      	bpl.n	8002ae4 <_printf_i+0x14c>
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	6861      	ldr	r1, [r4, #4]
 8002ad6:	4299      	cmp	r1, r3
 8002ad8:	bfde      	ittt	le
 8002ada:	2330      	movle	r3, #48	; 0x30
 8002adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ae0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ae4:	1b52      	subs	r2, r2, r5
 8002ae6:	6122      	str	r2, [r4, #16]
 8002ae8:	f8cd a000 	str.w	sl, [sp]
 8002aec:	464b      	mov	r3, r9
 8002aee:	aa03      	add	r2, sp, #12
 8002af0:	4621      	mov	r1, r4
 8002af2:	4640      	mov	r0, r8
 8002af4:	f7ff fee2 	bl	80028bc <_printf_common>
 8002af8:	3001      	adds	r0, #1
 8002afa:	d14c      	bne.n	8002b96 <_printf_i+0x1fe>
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b00:	b004      	add	sp, #16
 8002b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b06:	4835      	ldr	r0, [pc, #212]	; (8002bdc <_printf_i+0x244>)
 8002b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b0c:	6829      	ldr	r1, [r5, #0]
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b14:	6029      	str	r1, [r5, #0]
 8002b16:	061d      	lsls	r5, r3, #24
 8002b18:	d514      	bpl.n	8002b44 <_printf_i+0x1ac>
 8002b1a:	07df      	lsls	r7, r3, #31
 8002b1c:	bf44      	itt	mi
 8002b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8002b22:	6023      	strmi	r3, [r4, #0]
 8002b24:	b91e      	cbnz	r6, 8002b2e <_printf_i+0x196>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f023 0320 	bic.w	r3, r3, #32
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	2310      	movs	r3, #16
 8002b30:	e7b0      	b.n	8002a94 <_printf_i+0xfc>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	2378      	movs	r3, #120	; 0x78
 8002b3c:	4828      	ldr	r0, [pc, #160]	; (8002be0 <_printf_i+0x248>)
 8002b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b42:	e7e3      	b.n	8002b0c <_printf_i+0x174>
 8002b44:	0659      	lsls	r1, r3, #25
 8002b46:	bf48      	it	mi
 8002b48:	b2b6      	uxthmi	r6, r6
 8002b4a:	e7e6      	b.n	8002b1a <_printf_i+0x182>
 8002b4c:	4615      	mov	r5, r2
 8002b4e:	e7bb      	b.n	8002ac8 <_printf_i+0x130>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	6826      	ldr	r6, [r4, #0]
 8002b54:	6961      	ldr	r1, [r4, #20]
 8002b56:	1d18      	adds	r0, r3, #4
 8002b58:	6028      	str	r0, [r5, #0]
 8002b5a:	0635      	lsls	r5, r6, #24
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	d501      	bpl.n	8002b64 <_printf_i+0x1cc>
 8002b60:	6019      	str	r1, [r3, #0]
 8002b62:	e002      	b.n	8002b6a <_printf_i+0x1d2>
 8002b64:	0670      	lsls	r0, r6, #25
 8002b66:	d5fb      	bpl.n	8002b60 <_printf_i+0x1c8>
 8002b68:	8019      	strh	r1, [r3, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6123      	str	r3, [r4, #16]
 8002b6e:	4615      	mov	r5, r2
 8002b70:	e7ba      	b.n	8002ae8 <_printf_i+0x150>
 8002b72:	682b      	ldr	r3, [r5, #0]
 8002b74:	1d1a      	adds	r2, r3, #4
 8002b76:	602a      	str	r2, [r5, #0]
 8002b78:	681d      	ldr	r5, [r3, #0]
 8002b7a:	6862      	ldr	r2, [r4, #4]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4628      	mov	r0, r5
 8002b80:	f7fd fb46 	bl	8000210 <memchr>
 8002b84:	b108      	cbz	r0, 8002b8a <_printf_i+0x1f2>
 8002b86:	1b40      	subs	r0, r0, r5
 8002b88:	6060      	str	r0, [r4, #4]
 8002b8a:	6863      	ldr	r3, [r4, #4]
 8002b8c:	6123      	str	r3, [r4, #16]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b94:	e7a8      	b.n	8002ae8 <_printf_i+0x150>
 8002b96:	6923      	ldr	r3, [r4, #16]
 8002b98:	462a      	mov	r2, r5
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	4640      	mov	r0, r8
 8002b9e:	47d0      	blx	sl
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d0ab      	beq.n	8002afc <_printf_i+0x164>
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	079b      	lsls	r3, r3, #30
 8002ba8:	d413      	bmi.n	8002bd2 <_printf_i+0x23a>
 8002baa:	68e0      	ldr	r0, [r4, #12]
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	bfb8      	it	lt
 8002bb2:	4618      	movlt	r0, r3
 8002bb4:	e7a4      	b.n	8002b00 <_printf_i+0x168>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4632      	mov	r2, r6
 8002bba:	4649      	mov	r1, r9
 8002bbc:	4640      	mov	r0, r8
 8002bbe:	47d0      	blx	sl
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	d09b      	beq.n	8002afc <_printf_i+0x164>
 8002bc4:	3501      	adds	r5, #1
 8002bc6:	68e3      	ldr	r3, [r4, #12]
 8002bc8:	9903      	ldr	r1, [sp, #12]
 8002bca:	1a5b      	subs	r3, r3, r1
 8002bcc:	42ab      	cmp	r3, r5
 8002bce:	dcf2      	bgt.n	8002bb6 <_printf_i+0x21e>
 8002bd0:	e7eb      	b.n	8002baa <_printf_i+0x212>
 8002bd2:	2500      	movs	r5, #0
 8002bd4:	f104 0619 	add.w	r6, r4, #25
 8002bd8:	e7f5      	b.n	8002bc6 <_printf_i+0x22e>
 8002bda:	bf00      	nop
 8002bdc:	08002f05 	.word	0x08002f05
 8002be0:	08002f16 	.word	0x08002f16

08002be4 <memcpy>:
 8002be4:	440a      	add	r2, r1
 8002be6:	4291      	cmp	r1, r2
 8002be8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002bec:	d100      	bne.n	8002bf0 <memcpy+0xc>
 8002bee:	4770      	bx	lr
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bfa:	4291      	cmp	r1, r2
 8002bfc:	d1f9      	bne.n	8002bf2 <memcpy+0xe>
 8002bfe:	bd10      	pop	{r4, pc}

08002c00 <memmove>:
 8002c00:	4288      	cmp	r0, r1
 8002c02:	b510      	push	{r4, lr}
 8002c04:	eb01 0402 	add.w	r4, r1, r2
 8002c08:	d902      	bls.n	8002c10 <memmove+0x10>
 8002c0a:	4284      	cmp	r4, r0
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	d807      	bhi.n	8002c20 <memmove+0x20>
 8002c10:	1e43      	subs	r3, r0, #1
 8002c12:	42a1      	cmp	r1, r4
 8002c14:	d008      	beq.n	8002c28 <memmove+0x28>
 8002c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c1e:	e7f8      	b.n	8002c12 <memmove+0x12>
 8002c20:	4402      	add	r2, r0
 8002c22:	4601      	mov	r1, r0
 8002c24:	428a      	cmp	r2, r1
 8002c26:	d100      	bne.n	8002c2a <memmove+0x2a>
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c32:	e7f7      	b.n	8002c24 <memmove+0x24>

08002c34 <_free_r>:
 8002c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c36:	2900      	cmp	r1, #0
 8002c38:	d044      	beq.n	8002cc4 <_free_r+0x90>
 8002c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c3e:	9001      	str	r0, [sp, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f1a1 0404 	sub.w	r4, r1, #4
 8002c46:	bfb8      	it	lt
 8002c48:	18e4      	addlt	r4, r4, r3
 8002c4a:	f000 f913 	bl	8002e74 <__malloc_lock>
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <_free_r+0x94>)
 8002c50:	9801      	ldr	r0, [sp, #4]
 8002c52:	6813      	ldr	r3, [r2, #0]
 8002c54:	b933      	cbnz	r3, 8002c64 <_free_r+0x30>
 8002c56:	6063      	str	r3, [r4, #4]
 8002c58:	6014      	str	r4, [r2, #0]
 8002c5a:	b003      	add	sp, #12
 8002c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c60:	f000 b90e 	b.w	8002e80 <__malloc_unlock>
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	d908      	bls.n	8002c7a <_free_r+0x46>
 8002c68:	6825      	ldr	r5, [r4, #0]
 8002c6a:	1961      	adds	r1, r4, r5
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	bf01      	itttt	eq
 8002c70:	6819      	ldreq	r1, [r3, #0]
 8002c72:	685b      	ldreq	r3, [r3, #4]
 8002c74:	1949      	addeq	r1, r1, r5
 8002c76:	6021      	streq	r1, [r4, #0]
 8002c78:	e7ed      	b.n	8002c56 <_free_r+0x22>
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	b10b      	cbz	r3, 8002c84 <_free_r+0x50>
 8002c80:	42a3      	cmp	r3, r4
 8002c82:	d9fa      	bls.n	8002c7a <_free_r+0x46>
 8002c84:	6811      	ldr	r1, [r2, #0]
 8002c86:	1855      	adds	r5, r2, r1
 8002c88:	42a5      	cmp	r5, r4
 8002c8a:	d10b      	bne.n	8002ca4 <_free_r+0x70>
 8002c8c:	6824      	ldr	r4, [r4, #0]
 8002c8e:	4421      	add	r1, r4
 8002c90:	1854      	adds	r4, r2, r1
 8002c92:	42a3      	cmp	r3, r4
 8002c94:	6011      	str	r1, [r2, #0]
 8002c96:	d1e0      	bne.n	8002c5a <_free_r+0x26>
 8002c98:	681c      	ldr	r4, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	6053      	str	r3, [r2, #4]
 8002c9e:	4421      	add	r1, r4
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	e7da      	b.n	8002c5a <_free_r+0x26>
 8002ca4:	d902      	bls.n	8002cac <_free_r+0x78>
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	6003      	str	r3, [r0, #0]
 8002caa:	e7d6      	b.n	8002c5a <_free_r+0x26>
 8002cac:	6825      	ldr	r5, [r4, #0]
 8002cae:	1961      	adds	r1, r4, r5
 8002cb0:	428b      	cmp	r3, r1
 8002cb2:	bf04      	itt	eq
 8002cb4:	6819      	ldreq	r1, [r3, #0]
 8002cb6:	685b      	ldreq	r3, [r3, #4]
 8002cb8:	6063      	str	r3, [r4, #4]
 8002cba:	bf04      	itt	eq
 8002cbc:	1949      	addeq	r1, r1, r5
 8002cbe:	6021      	streq	r1, [r4, #0]
 8002cc0:	6054      	str	r4, [r2, #4]
 8002cc2:	e7ca      	b.n	8002c5a <_free_r+0x26>
 8002cc4:	b003      	add	sp, #12
 8002cc6:	bd30      	pop	{r4, r5, pc}
 8002cc8:	200000d8 	.word	0x200000d8

08002ccc <sbrk_aligned>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4e0e      	ldr	r6, [pc, #56]	; (8002d08 <sbrk_aligned+0x3c>)
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	6831      	ldr	r1, [r6, #0]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b911      	cbnz	r1, 8002cde <sbrk_aligned+0x12>
 8002cd8:	f000 f8bc 	bl	8002e54 <_sbrk_r>
 8002cdc:	6030      	str	r0, [r6, #0]
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 f8b7 	bl	8002e54 <_sbrk_r>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	d00a      	beq.n	8002d00 <sbrk_aligned+0x34>
 8002cea:	1cc4      	adds	r4, r0, #3
 8002cec:	f024 0403 	bic.w	r4, r4, #3
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d007      	beq.n	8002d04 <sbrk_aligned+0x38>
 8002cf4:	1a21      	subs	r1, r4, r0
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f8ac 	bl	8002e54 <_sbrk_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d101      	bne.n	8002d04 <sbrk_aligned+0x38>
 8002d00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	200000dc 	.word	0x200000dc

08002d0c <_malloc_r>:
 8002d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d10:	1ccd      	adds	r5, r1, #3
 8002d12:	f025 0503 	bic.w	r5, r5, #3
 8002d16:	3508      	adds	r5, #8
 8002d18:	2d0c      	cmp	r5, #12
 8002d1a:	bf38      	it	cc
 8002d1c:	250c      	movcc	r5, #12
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	4607      	mov	r7, r0
 8002d22:	db01      	blt.n	8002d28 <_malloc_r+0x1c>
 8002d24:	42a9      	cmp	r1, r5
 8002d26:	d905      	bls.n	8002d34 <_malloc_r+0x28>
 8002d28:	230c      	movs	r3, #12
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	4630      	mov	r0, r6
 8002d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d34:	4e2e      	ldr	r6, [pc, #184]	; (8002df0 <_malloc_r+0xe4>)
 8002d36:	f000 f89d 	bl	8002e74 <__malloc_lock>
 8002d3a:	6833      	ldr	r3, [r6, #0]
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	bb34      	cbnz	r4, 8002d8e <_malloc_r+0x82>
 8002d40:	4629      	mov	r1, r5
 8002d42:	4638      	mov	r0, r7
 8002d44:	f7ff ffc2 	bl	8002ccc <sbrk_aligned>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	d14d      	bne.n	8002dea <_malloc_r+0xde>
 8002d4e:	6834      	ldr	r4, [r6, #0]
 8002d50:	4626      	mov	r6, r4
 8002d52:	2e00      	cmp	r6, #0
 8002d54:	d140      	bne.n	8002dd8 <_malloc_r+0xcc>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	eb04 0803 	add.w	r8, r4, r3
 8002d60:	f000 f878 	bl	8002e54 <_sbrk_r>
 8002d64:	4580      	cmp	r8, r0
 8002d66:	d13a      	bne.n	8002dde <_malloc_r+0xd2>
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	3503      	adds	r5, #3
 8002d6c:	1a6d      	subs	r5, r5, r1
 8002d6e:	f025 0503 	bic.w	r5, r5, #3
 8002d72:	3508      	adds	r5, #8
 8002d74:	2d0c      	cmp	r5, #12
 8002d76:	bf38      	it	cc
 8002d78:	250c      	movcc	r5, #12
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	f7ff ffa5 	bl	8002ccc <sbrk_aligned>
 8002d82:	3001      	adds	r0, #1
 8002d84:	d02b      	beq.n	8002dde <_malloc_r+0xd2>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	442b      	add	r3, r5
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	e00e      	b.n	8002dac <_malloc_r+0xa0>
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	1b52      	subs	r2, r2, r5
 8002d92:	d41e      	bmi.n	8002dd2 <_malloc_r+0xc6>
 8002d94:	2a0b      	cmp	r2, #11
 8002d96:	d916      	bls.n	8002dc6 <_malloc_r+0xba>
 8002d98:	1961      	adds	r1, r4, r5
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	6025      	str	r5, [r4, #0]
 8002d9e:	bf18      	it	ne
 8002da0:	6059      	strne	r1, [r3, #4]
 8002da2:	6863      	ldr	r3, [r4, #4]
 8002da4:	bf08      	it	eq
 8002da6:	6031      	streq	r1, [r6, #0]
 8002da8:	5162      	str	r2, [r4, r5]
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	4638      	mov	r0, r7
 8002dae:	f104 060b 	add.w	r6, r4, #11
 8002db2:	f000 f865 	bl	8002e80 <__malloc_unlock>
 8002db6:	f026 0607 	bic.w	r6, r6, #7
 8002dba:	1d23      	adds	r3, r4, #4
 8002dbc:	1af2      	subs	r2, r6, r3
 8002dbe:	d0b6      	beq.n	8002d2e <_malloc_r+0x22>
 8002dc0:	1b9b      	subs	r3, r3, r6
 8002dc2:	50a3      	str	r3, [r4, r2]
 8002dc4:	e7b3      	b.n	8002d2e <_malloc_r+0x22>
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	bf0c      	ite	eq
 8002dcc:	6032      	streq	r2, [r6, #0]
 8002dce:	605a      	strne	r2, [r3, #4]
 8002dd0:	e7ec      	b.n	8002dac <_malloc_r+0xa0>
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	6864      	ldr	r4, [r4, #4]
 8002dd6:	e7b2      	b.n	8002d3e <_malloc_r+0x32>
 8002dd8:	4634      	mov	r4, r6
 8002dda:	6876      	ldr	r6, [r6, #4]
 8002ddc:	e7b9      	b.n	8002d52 <_malloc_r+0x46>
 8002dde:	230c      	movs	r3, #12
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	4638      	mov	r0, r7
 8002de4:	f000 f84c 	bl	8002e80 <__malloc_unlock>
 8002de8:	e7a1      	b.n	8002d2e <_malloc_r+0x22>
 8002dea:	6025      	str	r5, [r4, #0]
 8002dec:	e7de      	b.n	8002dac <_malloc_r+0xa0>
 8002dee:	bf00      	nop
 8002df0:	200000d8 	.word	0x200000d8

08002df4 <_realloc_r>:
 8002df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	4680      	mov	r8, r0
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	460e      	mov	r6, r1
 8002dfe:	b921      	cbnz	r1, 8002e0a <_realloc_r+0x16>
 8002e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e04:	4611      	mov	r1, r2
 8002e06:	f7ff bf81 	b.w	8002d0c <_malloc_r>
 8002e0a:	b92a      	cbnz	r2, 8002e18 <_realloc_r+0x24>
 8002e0c:	f7ff ff12 	bl	8002c34 <_free_r>
 8002e10:	4625      	mov	r5, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e18:	f000 f838 	bl	8002e8c <_malloc_usable_size_r>
 8002e1c:	4284      	cmp	r4, r0
 8002e1e:	4607      	mov	r7, r0
 8002e20:	d802      	bhi.n	8002e28 <_realloc_r+0x34>
 8002e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e26:	d812      	bhi.n	8002e4e <_realloc_r+0x5a>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7ff ff6e 	bl	8002d0c <_malloc_r>
 8002e30:	4605      	mov	r5, r0
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0ed      	beq.n	8002e12 <_realloc_r+0x1e>
 8002e36:	42bc      	cmp	r4, r7
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	bf28      	it	cs
 8002e3e:	463a      	movcs	r2, r7
 8002e40:	f7ff fed0 	bl	8002be4 <memcpy>
 8002e44:	4631      	mov	r1, r6
 8002e46:	4640      	mov	r0, r8
 8002e48:	f7ff fef4 	bl	8002c34 <_free_r>
 8002e4c:	e7e1      	b.n	8002e12 <_realloc_r+0x1e>
 8002e4e:	4635      	mov	r5, r6
 8002e50:	e7df      	b.n	8002e12 <_realloc_r+0x1e>
	...

08002e54 <_sbrk_r>:
 8002e54:	b538      	push	{r3, r4, r5, lr}
 8002e56:	4d06      	ldr	r5, [pc, #24]	; (8002e70 <_sbrk_r+0x1c>)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	f7fd ff38 	bl	8000cd4 <_sbrk>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_sbrk_r+0x1a>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_sbrk_r+0x1a>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	200000e0 	.word	0x200000e0

08002e74 <__malloc_lock>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__malloc_lock+0x8>)
 8002e76:	f000 b811 	b.w	8002e9c <__retarget_lock_acquire_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	200000e4 	.word	0x200000e4

08002e80 <__malloc_unlock>:
 8002e80:	4801      	ldr	r0, [pc, #4]	; (8002e88 <__malloc_unlock+0x8>)
 8002e82:	f000 b80c 	b.w	8002e9e <__retarget_lock_release_recursive>
 8002e86:	bf00      	nop
 8002e88:	200000e4 	.word	0x200000e4

08002e8c <_malloc_usable_size_r>:
 8002e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e90:	1f18      	subs	r0, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bfbc      	itt	lt
 8002e96:	580b      	ldrlt	r3, [r1, r0]
 8002e98:	18c0      	addlt	r0, r0, r3
 8002e9a:	4770      	bx	lr

08002e9c <__retarget_lock_acquire_recursive>:
 8002e9c:	4770      	bx	lr

08002e9e <__retarget_lock_release_recursive>:
 8002e9e:	4770      	bx	lr

08002ea0 <_init>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

08002eac <_fini>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr
